//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  section: Section;
  sectionConnection: SectionConnection;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySectionArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySectionConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SectionFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  section?: InputMaybe<SectionFilter>;
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Section | PageHome | PageContact | PageEquipe | Folder;

export type SectionGallery = {
  __typename?: 'SectionGallery';
  imageId: Scalars['String']['output'];
  alt?: Maybe<Scalars['String']['output']>;
};

export type Section = Node & Document & {
  __typename?: 'Section';
  title: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  gallery?: Maybe<Array<Maybe<SectionGallery>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SectionGalleryFilter = {
  imageId?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SectionFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  gallery?: InputMaybe<SectionGalleryFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type SectionConnectionEdges = {
  __typename?: 'SectionConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Section>;
};

export type SectionConnection = Connection & {
  __typename?: 'SectionConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SectionConnectionEdges>>>;
};

export type PageHome = Node & Document & {
  __typename?: 'PageHome';
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  heroTitle: Scalars['String']['output'];
  heroDescription?: Maybe<Scalars['String']['output']>;
  contactHeading?: Maybe<Scalars['String']['output']>;
  contactPhoneLabel?: Maybe<Scalars['String']['output']>;
  contactPhoneHref?: Maybe<Scalars['String']['output']>;
  contactEmailLabel?: Maybe<Scalars['String']['output']>;
  contactEmailHref?: Maybe<Scalars['String']['output']>;
  financeursIntro?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageContactAddress = {
  __typename?: 'PageContactAddress';
  label?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
};

export type PageContactPhone = {
  __typename?: 'PageContactPhone';
  label?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
};

export type PageContactEmail = {
  __typename?: 'PageContactEmail';
  label?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
};

export type PageContactInfoBlocks = {
  __typename?: 'PageContactInfoBlocks';
  heading?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['String']['output']>;
};

export type PageContact = Node & Document & {
  __typename?: 'PageContact';
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  address?: Maybe<PageContactAddress>;
  phone?: Maybe<PageContactPhone>;
  email?: Maybe<PageContactEmail>;
  infoBlocks?: Maybe<Array<Maybe<PageContactInfoBlocks>>>;
  mapEmbedUrl?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageEquipePeople = {
  __typename?: 'PageEquipePeople';
  name: Scalars['String']['output'];
  role?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
};

export type PageEquipe = Node & Document & {
  __typename?: 'PageEquipe';
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  people?: Maybe<Array<Maybe<PageEquipePeople>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Page = PageHome | PageContact | PageEquipe;

export type PageHomeFilter = {
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  heroTitle?: InputMaybe<StringFilter>;
  heroDescription?: InputMaybe<StringFilter>;
  contactHeading?: InputMaybe<StringFilter>;
  contactPhoneLabel?: InputMaybe<StringFilter>;
  contactPhoneHref?: InputMaybe<StringFilter>;
  contactEmailLabel?: InputMaybe<StringFilter>;
  contactEmailHref?: InputMaybe<StringFilter>;
  financeursIntro?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageContactAddressFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type PageContactPhoneFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type PageContactEmailFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
};

export type PageContactInfoBlocksFilter = {
  heading?: InputMaybe<StringFilter>;
  body?: InputMaybe<StringFilter>;
};

export type PageContactFilter = {
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  address?: InputMaybe<PageContactAddressFilter>;
  phone?: InputMaybe<PageContactPhoneFilter>;
  email?: InputMaybe<PageContactEmailFilter>;
  infoBlocks?: InputMaybe<PageContactInfoBlocksFilter>;
  mapEmbedUrl?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageEquipePeopleFilter = {
  name?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
};

export type PageEquipeFilter = {
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  people?: InputMaybe<PageEquipePeopleFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageFilter = {
  home?: InputMaybe<PageHomeFilter>;
  contact?: InputMaybe<PageContactFilter>;
  equipe?: InputMaybe<PageEquipeFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateSection: Section;
  createSection: Section;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateSectionArgs = {
  relativePath: Scalars['String']['input'];
  params: SectionMutation;
};


export type MutationCreateSectionArgs = {
  relativePath: Scalars['String']['input'];
  params: SectionMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};

export type DocumentUpdateMutation = {
  section?: InputMaybe<SectionMutation>;
  page?: InputMaybe<PageMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  section?: InputMaybe<SectionMutation>;
  page?: InputMaybe<PageMutation>;
};

export type SectionGalleryMutation = {
  imageId?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type SectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<InputMaybe<SectionGalleryMutation>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageHomeMutation = {
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  heroTitle?: InputMaybe<Scalars['String']['input']>;
  heroDescription?: InputMaybe<Scalars['String']['input']>;
  contactHeading?: InputMaybe<Scalars['String']['input']>;
  contactPhoneLabel?: InputMaybe<Scalars['String']['input']>;
  contactPhoneHref?: InputMaybe<Scalars['String']['input']>;
  contactEmailLabel?: InputMaybe<Scalars['String']['input']>;
  contactEmailHref?: InputMaybe<Scalars['String']['input']>;
  financeursIntro?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageContactAddressMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type PageContactPhoneMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type PageContactEmailMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
};

export type PageContactInfoBlocksMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
};

export type PageContactMutation = {
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<PageContactAddressMutation>;
  phone?: InputMaybe<PageContactPhoneMutation>;
  email?: InputMaybe<PageContactEmailMutation>;
  infoBlocks?: InputMaybe<Array<InputMaybe<PageContactInfoBlocksMutation>>>;
  mapEmbedUrl?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageEquipePeopleMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
};

export type PageEquipeMutation = {
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  people?: InputMaybe<Array<InputMaybe<PageEquipePeopleMutation>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageMutation = {
  home?: InputMaybe<PageHomeMutation>;
  contact?: InputMaybe<PageContactMutation>;
  equipe?: InputMaybe<PageEquipeMutation>;
};

export type SectionPartsFragment = { __typename: 'Section', title: string, slug: string, description?: string | null, body?: any | null, gallery?: Array<{ __typename: 'SectionGallery', imageId: string, alt?: string | null } | null> | null };

type PageParts_PageHome_Fragment = { __typename: 'PageHome', slug: string, title: string, heroTitle: string, heroDescription?: string | null, contactHeading?: string | null, contactPhoneLabel?: string | null, contactPhoneHref?: string | null, contactEmailLabel?: string | null, contactEmailHref?: string | null, financeursIntro?: string | null, body?: any | null };

type PageParts_PageContact_Fragment = { __typename: 'PageContact', slug: string, title: string, mapEmbedUrl?: string | null, body?: any | null, address?: { __typename: 'PageContactAddress', label?: string | null, href?: string | null } | null, phone?: { __typename: 'PageContactPhone', label?: string | null, href?: string | null } | null, email?: { __typename: 'PageContactEmail', label?: string | null, href?: string | null } | null, infoBlocks?: Array<{ __typename: 'PageContactInfoBlocks', heading?: string | null, body?: string | null } | null> | null };

type PageParts_PageEquipe_Fragment = { __typename: 'PageEquipe', slug: string, title: string, description?: string | null, body?: any | null, people?: Array<{ __typename: 'PageEquipePeople', name: string, role?: string | null, bio?: string | null } | null> | null };

export type PagePartsFragment = PageParts_PageHome_Fragment | PageParts_PageContact_Fragment | PageParts_PageEquipe_Fragment;

export type SectionQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SectionQuery = { __typename?: 'Query', section: { __typename: 'Section', id: string, title: string, slug: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, gallery?: Array<{ __typename: 'SectionGallery', imageId: string, alt?: string | null } | null> | null } };

export type SectionConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SectionFilter>;
}>;


export type SectionConnectionQuery = { __typename?: 'Query', sectionConnection: { __typename?: 'SectionConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SectionConnectionEdges', cursor: string, node?: { __typename: 'Section', id: string, title: string, slug: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, gallery?: Array<{ __typename: 'SectionGallery', imageId: string, alt?: string | null } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'PageHome', id: string, slug: string, title: string, heroTitle: string, heroDescription?: string | null, contactHeading?: string | null, contactPhoneLabel?: string | null, contactPhoneHref?: string | null, contactEmailLabel?: string | null, contactEmailHref?: string | null, financeursIntro?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | { __typename: 'PageContact', id: string, slug: string, title: string, mapEmbedUrl?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'PageContactAddress', label?: string | null, href?: string | null } | null, phone?: { __typename: 'PageContactPhone', label?: string | null, href?: string | null } | null, email?: { __typename: 'PageContactEmail', label?: string | null, href?: string | null } | null, infoBlocks?: Array<{ __typename: 'PageContactInfoBlocks', heading?: string | null, body?: string | null } | null> | null } | { __typename: 'PageEquipe', id: string, slug: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, people?: Array<{ __typename: 'PageEquipePeople', name: string, role?: string | null, bio?: string | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'PageHome', id: string, slug: string, title: string, heroTitle: string, heroDescription?: string | null, contactHeading?: string | null, contactPhoneLabel?: string | null, contactPhoneHref?: string | null, contactEmailLabel?: string | null, contactEmailHref?: string | null, financeursIntro?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | { __typename: 'PageContact', id: string, slug: string, title: string, mapEmbedUrl?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, address?: { __typename: 'PageContactAddress', label?: string | null, href?: string | null } | null, phone?: { __typename: 'PageContactPhone', label?: string | null, href?: string | null } | null, email?: { __typename: 'PageContactEmail', label?: string | null, href?: string | null } | null, infoBlocks?: Array<{ __typename: 'PageContactInfoBlocks', heading?: string | null, body?: string | null } | null> | null } | { __typename: 'PageEquipe', id: string, slug: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, people?: Array<{ __typename: 'PageEquipePeople', name: string, role?: string | null, bio?: string | null } | null> | null } | null } | null> | null } };

export const SectionPartsFragmentDoc = gql`
    fragment SectionParts on Section {
  __typename
  title
  slug
  description
  gallery {
    __typename
    imageId
    alt
  }
  body
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  ... on PageHome {
    slug
    title
    heroTitle
    heroDescription
    contactHeading
    contactPhoneLabel
    contactPhoneHref
    contactEmailLabel
    contactEmailHref
    financeursIntro
    body
  }
  ... on PageContact {
    slug
    title
    address {
      __typename
      label
      href
    }
    phone {
      __typename
      label
      href
    }
    email {
      __typename
      label
      href
    }
    infoBlocks {
      __typename
      heading
      body
    }
    mapEmbedUrl
    body
  }
  ... on PageEquipe {
    slug
    title
    description
    people {
      __typename
      name
      role
      bio
    }
    body
  }
}
    `;
export const SectionDocument = gql`
    query section($relativePath: String!) {
  section(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SectionParts
  }
}
    ${SectionPartsFragmentDoc}`;
export const SectionConnectionDocument = gql`
    query sectionConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SectionFilter) {
  sectionConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SectionParts
      }
    }
  }
}
    ${SectionPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      section(variables: SectionQueryVariables, options?: C): Promise<{data: SectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SectionQueryVariables, query: string}> {
        return requester<{data: SectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SectionQueryVariables, query: string}, SectionQueryVariables>(SectionDocument, variables, options);
      },
    sectionConnection(variables?: SectionConnectionQueryVariables, options?: C): Promise<{data: SectionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SectionConnectionQueryVariables, query: string}> {
        return requester<{data: SectionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SectionConnectionQueryVariables, query: string}, SectionConnectionQueryVariables>(SectionConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  